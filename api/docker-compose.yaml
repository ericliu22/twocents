services:
  database:
    image: postgres:alpine
    env_file:
      #Requires POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
      - database.env
    restart: unless-stopped
    networks:
      - api-network
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/initdb/:/docker-entrypoint-initdb.d:ro
  server:
    build: ./
    env_file:
      #Requires DATABASE_URL
      - api.env
    networks:
      - api-network
    depends_on:
      - database
    restart: unless-stopped
    volumes:
      - ./logs:/root/logs
      - ./twocents-82a02-firebase-adminsdk-fbsvc-e7391780d6.json:/root/twocents-82a02-firebase-adminsdk-fbsvc-e7391780d6.json:ro
  reverse-proxy:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    networks:
      - api-network
    volumes:
      - ./reverseproxy/conf.d/:/etc/nginx/conf.d/:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - certbot

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
  zookeeper:
    image: zookeeper:latest
    restart: unless-stopped
    networks:
      - api-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: apache/kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - api-network
      #ports:
      #- "9092:9092"
    environment:
      AFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # For a single-broker dev setup, replication factor is 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
volumes:
  pgdata:

networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24  # Define your fixed subnet
