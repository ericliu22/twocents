// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    id, media, date_created, media_url
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, media, date_created, media_url
`

type CreatePostParams struct {
	ID          uuid.UUID   `json:"id"`
	Media       MediaType   `json:"media"`
	DateCreated pgtype.Date `json:"dateCreated"`
	MediaUrl    *string     `json:"mediaUrl"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Media,
		arg.DateCreated,
		arg.MediaUrl,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Media,
		&i.DateCreated,
		&i.MediaUrl,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, provider, date_created, username, hash, salt
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, provider, date_created, username, hash, salt
`

type CreateUserParams struct {
	ID          uuid.UUID    `json:"id"`
	Provider    ProviderType `json:"provider"`
	DateCreated pgtype.Date  `json:"dateCreated"`
	Username    string       `json:"username"`
	Hash        *string      `json:"hash"`
	Salt        *string      `json:"salt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Provider,
		arg.DateCreated,
		arg.Username,
		arg.Hash,
		arg.Salt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.DateCreated,
		&i.Username,
		&i.Hash,
		&i.Salt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, media, date_created, media_url FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Media,
		&i.DateCreated,
		&i.MediaUrl,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, media, date_created, media_url FROM posts
ORDER BY date_created
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Media,
			&i.DateCreated,
			&i.MediaUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, provider, date_created, username, hash, salt FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Provider,
		&i.DateCreated,
		&i.Username,
		&i.Hash,
		&i.Salt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, provider, date_created, username, hash, salt FROM users
ORDER BY date_created
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Provider,
			&i.DateCreated,
			&i.Username,
			&i.Hash,
			&i.Salt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
    set media = $2,
    date_created = $3,
    media_url = $4
WHERE id = $1
`

type UpdatePostParams struct {
	ID          uuid.UUID   `json:"id"`
	Media       MediaType   `json:"media"`
	DateCreated pgtype.Date `json:"dateCreated"`
	MediaUrl    *string     `json:"mediaUrl"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.Exec(ctx, updatePost,
		arg.ID,
		arg.Media,
		arg.DateCreated,
		arg.MediaUrl,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
	set provider = $2,
	date_created = $3,
	username = $4,
    hash = $5,
    salt = $6
WHERE id = $1
`

type UpdateUserParams struct {
	ID          uuid.UUID    `json:"id"`
	Provider    ProviderType `json:"provider"`
	DateCreated pgtype.Date  `json:"dateCreated"`
	Username    string       `json:"username"`
	Hash        *string      `json:"hash"`
	Salt        *string      `json:"salt"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Provider,
		arg.DateCreated,
		arg.Username,
		arg.Hash,
		arg.Salt,
	)
	return err
}
