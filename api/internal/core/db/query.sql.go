// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  id, media, date_created, media_url
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, media, date_created, media_url
`

type CreatePostParams struct {
	ID          uuid.UUID
	Media       MediaType
	DateCreated pgtype.Date
	MediaUrl    pgtype.Text
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.ID,
		arg.Media,
		arg.DateCreated,
		arg.MediaUrl,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Media,
		&i.DateCreated,
		&i.MediaUrl,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, media, date_created, media_url FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Media,
		&i.DateCreated,
		&i.MediaUrl,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, media, date_created, media_url FROM posts
ORDER BY date_created
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Media,
			&i.DateCreated,
			&i.MediaUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
	set media = $2,
	date_created = $3,
	media_url = $4
WHERE id = $1
`

type UpdatePostParams struct {
	ID          uuid.UUID
	Media       MediaType
	DateCreated pgtype.Date
	MediaUrl    pgtype.Text
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.Exec(ctx, updatePost,
		arg.ID,
		arg.Media,
		arg.DateCreated,
		arg.MediaUrl,
	)
	return err
}
