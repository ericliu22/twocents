// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: media.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images (
    id,
    media_url
)
VALUES ($1, $2)
ON CONFLICT (id) DO NOTHING
RETURNING id, media_url
`

type CreateImageParams struct {
	ID       uuid.UUID `json:"id"`
	MediaUrl string    `json:"mediaUrl"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRow(ctx, createImage, arg.ID, arg.MediaUrl)
	var i Image
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    id,
    media_url
)
VALUES ($1, $2)
ON CONFLICT (id) DO NOTHING
RETURNING id, media_url
`

type CreateLinkParams struct {
	ID       uuid.UUID `json:"id"`
	MediaUrl string    `json:"mediaUrl"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink, arg.ID, arg.MediaUrl)
	var i Link
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos (
    id,
    media_url
)
VALUES ($1, $2)
ON CONFLICT (id) DO NOTHING
RETURNING id, media_url
`

type CreateVideoParams struct {
	ID       uuid.UUID `json:"id"`
	MediaUrl string    `json:"mediaUrl"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRow(ctx, createVideo, arg.ID, arg.MediaUrl)
	var i Video
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, media_url
FROM images
WHERE id = $1
`

func (q *Queries) GetImage(ctx context.Context, id uuid.UUID) (Image, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i Image
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}

const getLink = `-- name: GetLink :one
SELECT id, media_url
FROM links
WHERE id = $1
`

func (q *Queries) GetLink(ctx context.Context, id uuid.UUID) (Link, error) {
	row := q.db.QueryRow(ctx, getLink, id)
	var i Link
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}

const getVideo = `-- name: GetVideo :one
SELECT id, media_url
FROM videos
WHERE id = $1
`

func (q *Queries) GetVideo(ctx context.Context, id uuid.UUID) (Video, error) {
	row := q.db.QueryRow(ctx, getVideo, id)
	var i Video
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}
