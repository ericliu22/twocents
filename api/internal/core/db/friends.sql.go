// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friends.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFriendship = `-- name: CreateFriendship :one
INSERT INTO friendships (
    user_id,
    friend_id,
    status,
    date_created
) VALUES (
    $1, $2, $3, CURRENT_DATE
)
RETURNING user_id, friend_id, status, date_created
`

type CreateFriendshipParams struct {
	UserID   uuid.UUID        `json:"userId"`
	FriendID uuid.UUID        `json:"friendId"`
	Status   FriendshipStatus `json:"status"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, createFriendship, arg.UserID, arg.FriendID, arg.Status)
	var i Friendship
	err := row.Scan(
		&i.UserID,
		&i.FriendID,
		&i.Status,
		&i.DateCreated,
	)
	return i, err
}

const deleteFriendship = `-- name: DeleteFriendship :exec
DELETE FROM friendships
WHERE user_id = $1
  AND friend_id = $2
`

type DeleteFriendshipParams struct {
	UserID   uuid.UUID `json:"userId"`
	FriendID uuid.UUID `json:"friendId"`
}

func (q *Queries) DeleteFriendship(ctx context.Context, arg DeleteFriendshipParams) error {
	_, err := q.db.Exec(ctx, deleteFriendship, arg.UserID, arg.FriendID)
	return err
}

const getFriendship = `-- name: GetFriendship :one
SELECT
    user_id,
    friend_id,
    status,
    date_created
FROM friendships
WHERE user_id = $1
  AND friend_id = $2
`

type GetFriendshipParams struct {
	UserID   uuid.UUID `json:"userId"`
	FriendID uuid.UUID `json:"friendId"`
}

func (q *Queries) GetFriendship(ctx context.Context, arg GetFriendshipParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, getFriendship, arg.UserID, arg.FriendID)
	var i Friendship
	err := row.Scan(
		&i.UserID,
		&i.FriendID,
		&i.Status,
		&i.DateCreated,
	)
	return i, err
}

const listUserFriendships = `-- name: ListUserFriendships :many
SELECT
    user_id,
    friend_id,
    status,
    date_created
FROM friendships
WHERE user_id = $1
`

func (q *Queries) ListUserFriendships(ctx context.Context, userID uuid.UUID) ([]Friendship, error) {
	rows, err := q.db.Query(ctx, listUserFriendships, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Friendship
	for rows.Next() {
		var i Friendship
		if err := rows.Scan(
			&i.UserID,
			&i.FriendID,
			&i.Status,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendshipStatus = `-- name: UpdateFriendshipStatus :one
UPDATE friendships
SET status = $3
WHERE user_id = $1
  AND friend_id = $2
RETURNING user_id, friend_id, status, date_created
`

type UpdateFriendshipStatusParams struct {
	UserID   uuid.UUID        `json:"userId"`
	FriendID uuid.UUID        `json:"friendId"`
	Status   FriendshipStatus `json:"status"`
}

func (q *Queries) UpdateFriendshipStatus(ctx context.Context, arg UpdateFriendshipStatusParams) (Friendship, error) {
	row := q.db.QueryRow(ctx, updateFriendshipStatus, arg.UserID, arg.FriendID, arg.Status)
	var i Friendship
	err := row.Scan(
		&i.UserID,
		&i.FriendID,
		&i.Status,
		&i.DateCreated,
	)
	return i, err
}
