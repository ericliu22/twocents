// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkFirebaseId = `-- name: CheckFirebaseId :one
SELECT EXISTS(SELECT 1 FROM users WHERE firebase_uid = $1)
`

func (q *Queries) CheckFirebaseId(ctx context.Context, firebaseUid string) (bool, error) {
	row := q.db.QueryRow(ctx, checkFirebaseId, firebaseUid)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUser = `-- name: CheckUser :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)
`

func (q *Queries) CheckUser(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkUser, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, firebase_uid, provider, date_created, username, hash, salt
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
ON CONFLICT (id) DO NOTHING
RETURNING id, firebase_uid, provider, date_created, username, hash, salt, device_tokens
`

type CreateUserParams struct {
	ID          uuid.UUID        `json:"id"`
	FirebaseUid string           `json:"firebaseUid"`
	Provider    ProviderType     `json:"provider"`
	DateCreated pgtype.Timestamp `json:"dateCreated"`
	Username    string           `json:"username"`
	Hash        *string          `json:"hash"`
	Salt        *string          `json:"salt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.FirebaseUid,
		arg.Provider,
		arg.DateCreated,
		arg.Username,
		arg.Hash,
		arg.Salt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirebaseUid,
		&i.Provider,
		&i.DateCreated,
		&i.Username,
		&i.Hash,
		&i.Salt,
		&i.DeviceTokens,
	)
	return i, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (
    user_id,
    profile_pic,
    username,
    name
)
VALUES ($1, $2, $3, $4)
ON CONFLICT (user_id) DO NOTHING
RETURNING user_id, profile_pic, username, name
`

type CreateUserProfileParams struct {
	UserID     uuid.UUID `json:"userId"`
	ProfilePic *string   `json:"profilePic"`
	Username   string    `json:"username"`
	Name       *string   `json:"name"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.UserID,
		arg.ProfilePic,
		arg.Username,
		arg.Name,
	)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.ProfilePic,
		&i.Username,
		&i.Name,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM user_profiles
WHERE user_id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserProfile, userID)
	return err
}

const getEntireUser = `-- name: GetEntireUser :one
SELECT users.id, users.firebase_uid, users.provider, users.date_created, users.username, users.hash, users.salt, users.device_tokens, user_profiles.user_id, user_profiles.profile_pic, user_profiles.username, user_profiles.name
FROM users
JOIN user_profiles ON users.id = user_profiles.user_id
WHERE users.id = $1
`

type GetEntireUserRow struct {
	User        User        `json:"user"`
	UserProfile UserProfile `json:"userProfile"`
}

func (q *Queries) GetEntireUser(ctx context.Context, id uuid.UUID) (GetEntireUserRow, error) {
	row := q.db.QueryRow(ctx, getEntireUser, id)
	var i GetEntireUserRow
	err := row.Scan(
		&i.User.ID,
		&i.User.FirebaseUid,
		&i.User.Provider,
		&i.User.DateCreated,
		&i.User.Username,
		&i.User.Hash,
		&i.User.Salt,
		&i.User.DeviceTokens,
		&i.UserProfile.UserID,
		&i.UserProfile.ProfilePic,
		&i.UserProfile.Username,
		&i.UserProfile.Name,
	)
	return i, err
}

const getFirebaseId = `-- name: GetFirebaseId :one
SELECT id, firebase_uid, provider, date_created, username, hash, salt, device_tokens FROM users
WHERE firebase_uid = $1 LIMIT 1
`

func (q *Queries) GetFirebaseId(ctx context.Context, firebaseUid string) (User, error) {
	row := q.db.QueryRow(ctx, getFirebaseId, firebaseUid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirebaseUid,
		&i.Provider,
		&i.DateCreated,
		&i.Username,
		&i.Hash,
		&i.Salt,
		&i.DeviceTokens,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, firebase_uid, provider, date_created, username, hash, salt, device_tokens FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirebaseUid,
		&i.Provider,
		&i.DateCreated,
		&i.Username,
		&i.Hash,
		&i.Salt,
		&i.DeviceTokens,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT user_id, profile_pic, username, name
FROM user_profiles
WHERE user_id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, userID uuid.UUID) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, userID)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.ProfilePic,
		&i.Username,
		&i.Name,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, firebase_uid, provider, date_created, username, hash, salt, device_tokens FROM users
ORDER BY date_created
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirebaseUid,
			&i.Provider,
			&i.DateCreated,
			&i.Username,
			&i.Hash,
			&i.Salt,
			&i.DeviceTokens,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfilePic = `-- name: UpdateProfilePic :exec
UPDATE user_profiles
SET profile_pic = $2
WHERE user_id = $1
`

type UpdateProfilePicParams struct {
	UserID     uuid.UUID `json:"userId"`
	ProfilePic *string   `json:"profilePic"`
}

func (q *Queries) UpdateProfilePic(ctx context.Context, arg UpdateProfilePicParams) error {
	_, err := q.db.Exec(ctx, updateProfilePic, arg.UserID, arg.ProfilePic)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET provider = $2,
    date_created = $3,
    username = $4,
    hash = $5,
    salt = $6
WHERE id = $1
`

type UpdateUserParams struct {
	ID          uuid.UUID        `json:"id"`
	Provider    ProviderType     `json:"provider"`
	DateCreated pgtype.Timestamp `json:"dateCreated"`
	Username    string           `json:"username"`
	Hash        *string          `json:"hash"`
	Salt        *string          `json:"salt"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Provider,
		arg.DateCreated,
		arg.Username,
		arg.Hash,
		arg.Salt,
	)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE user_profiles
SET profile_pic = $2,
    username    = $3,
    name        = $4
WHERE user_id = $1
`

type UpdateUserProfileParams struct {
	UserID     uuid.UUID `json:"userId"`
	ProfilePic *string   `json:"profilePic"`
	Username   string    `json:"username"`
	Name       *string   `json:"name"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.Exec(ctx, updateUserProfile,
		arg.UserID,
		arg.ProfilePic,
		arg.Username,
		arg.Name,
	)
	return err
}
