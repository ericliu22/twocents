// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type FriendshipStatus string

const (
	FriendshipStatusPENDING  FriendshipStatus = "PENDING"
	FriendshipStatusACCEPTED FriendshipStatus = "ACCEPTED"
	FriendshipStatusBLOCKED  FriendshipStatus = "BLOCKED"
)

func (e *FriendshipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FriendshipStatus(s)
	case string:
		*e = FriendshipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FriendshipStatus: %T", src)
	}
	return nil
}

type NullFriendshipStatus struct {
	FriendshipStatus FriendshipStatus `json:"friendshipStatus"`
	Valid            bool             `json:"valid"` // Valid is true if FriendshipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFriendshipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FriendshipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FriendshipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFriendshipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FriendshipStatus), nil
}

type GroupRole string

const (
	GroupRoleADMIN  GroupRole = "ADMIN"
	GroupRoleMEMBER GroupRole = "MEMBER"
)

func (e *GroupRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GroupRole(s)
	case string:
		*e = GroupRole(s)
	default:
		return fmt.Errorf("unsupported scan type for GroupRole: %T", src)
	}
	return nil
}

type NullGroupRole struct {
	GroupRole GroupRole `json:"groupRole"`
	Valid     bool      `json:"valid"` // Valid is true if GroupRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGroupRole) Scan(value interface{}) error {
	if value == nil {
		ns.GroupRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GroupRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGroupRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GroupRole), nil
}

type MediaType string

const (
	MediaTypeIMAGE MediaType = "IMAGE"
	MediaTypeVIDEO MediaType = "VIDEO"
	MediaTypeLINK  MediaType = "LINK"
	MediaTypeTEXT  MediaType = "TEXT"
	MediaTypeOTHER MediaType = "OTHER"
)

func (e *MediaType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaType(s)
	case string:
		*e = MediaType(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaType: %T", src)
	}
	return nil
}

type NullMediaType struct {
	MediaType MediaType `json:"mediaType"`
	Valid     bool      `json:"valid"` // Valid is true if MediaType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaType) Scan(value interface{}) error {
	if value == nil {
		ns.MediaType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaType), nil
}

type PostStatus string

const (
	PostStatusPENDING   PostStatus = "PENDING"
	PostStatusPUBLISHED PostStatus = "PUBLISHED"
	PostStatusFAILED    PostStatus = "FAILED"
)

func (e *PostStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostStatus(s)
	case string:
		*e = PostStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PostStatus: %T", src)
	}
	return nil
}

type NullPostStatus struct {
	PostStatus PostStatus `json:"postStatus"`
	Valid      bool       `json:"valid"` // Valid is true if PostStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PostStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostStatus), nil
}

type ProviderType string

const (
	ProviderTypeFACEBOOK ProviderType = "FACEBOOK"
	ProviderTypeGOOGLE   ProviderType = "GOOGLE"
	ProviderTypeAPPLE    ProviderType = "APPLE"
	ProviderTypeEMAIL    ProviderType = "EMAIL"
	ProviderTypeTWOCENTS ProviderType = "TWOCENTS"
)

func (e *ProviderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProviderType(s)
	case string:
		*e = ProviderType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProviderType: %T", src)
	}
	return nil
}

type NullProviderType struct {
	ProviderType ProviderType `json:"providerType"`
	Valid        bool         `json:"valid"` // Valid is true if ProviderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProviderType) Scan(value interface{}) error {
	if value == nil {
		ns.ProviderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProviderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProviderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProviderType), nil
}

type FriendGroup struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	DateCreated pgtype.Timestamptz `json:"dateCreated"`
	OwnerID     uuid.UUID          `json:"ownerId"`
}

type FriendGroupMember struct {
	GroupID  uuid.UUID          `json:"groupId"`
	UserID   uuid.UUID          `json:"userId"`
	JoinedAt pgtype.Timestamptz `json:"joinedAt"`
	Role     GroupRole          `json:"role"`
}

type FriendGroupPost struct {
	GroupID uuid.UUID      `json:"groupId"`
	PostID  uuid.UUID      `json:"postId"`
	Score   pgtype.Numeric `json:"score"`
	Status  PostStatus     `json:"status"`
}

type Friendship struct {
	UserID      uuid.UUID          `json:"userId"`
	FriendID    uuid.UUID          `json:"friendId"`
	Status      FriendshipStatus   `json:"status"`
	DateCreated pgtype.Timestamptz `json:"dateCreated"`
}

type Image struct {
	ID       uuid.UUID `json:"id"`
	PostID   uuid.UUID `json:"postId"`
	MediaUrl string    `json:"mediaUrl"`
}

type Link struct {
	ID       uuid.UUID `json:"id"`
	PostID   uuid.UUID `json:"postId"`
	MediaUrl string    `json:"mediaUrl"`
}

type Post struct {
	ID          uuid.UUID          `json:"id"`
	UserID      uuid.UUID          `json:"userId"`
	Media       MediaType          `json:"media"`
	DateCreated pgtype.Timestamptz `json:"dateCreated"`
	Caption     *string            `json:"caption"`
}

type Text struct {
	ID     uuid.UUID `json:"id"`
	PostID uuid.UUID `json:"postId"`
	Text   string    `json:"text"`
}

type User struct {
	ID           uuid.UUID          `json:"id"`
	FirebaseUid  string             `json:"firebaseUid"`
	Provider     ProviderType       `json:"provider"`
	DateCreated  pgtype.Timestamptz `json:"dateCreated"`
	Username     string             `json:"username"`
	Hash         *string            `json:"hash"`
	Salt         *string            `json:"salt"`
	DeviceTokens []string           `json:"deviceTokens"`
}

type UserProfile struct {
	UserID      uuid.UUID          `json:"userId"`
	ProfilePic  *string            `json:"profilePic"`
	Username    string             `json:"username"`
	Name        *string            `json:"name"`
	Posts       int32              `json:"posts"`
	DateCreated pgtype.Timestamptz `json:"dateCreated"`
}

type Video struct {
	ID       uuid.UUID `json:"id"`
	PostID   uuid.UUID `json:"postId"`
	MediaUrl string    `json:"mediaUrl"`
}
