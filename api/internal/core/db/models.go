// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type MediaType string

const (
	MediaTypeIMAGE MediaType = "IMAGE"
	MediaTypeVIDEO MediaType = "VIDEO"
	MediaTypeOTHER MediaType = "OTHER"
)

func (e *MediaType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaType(s)
	case string:
		*e = MediaType(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaType: %T", src)
	}
	return nil
}

type NullMediaType struct {
	MediaType MediaType `json:"mediaType"`
	Valid     bool      `json:"valid"` // Valid is true if MediaType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaType) Scan(value interface{}) error {
	if value == nil {
		ns.MediaType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaType), nil
}

type ProviderType string

const (
	ProviderTypeFACEBOOK ProviderType = "FACEBOOK"
	ProviderTypeGOOGLE   ProviderType = "GOOGLE"
	ProviderTypeAPPLE    ProviderType = "APPLE"
	ProviderTypeTWOCENTS ProviderType = "TWOCENTS"
)

func (e *ProviderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProviderType(s)
	case string:
		*e = ProviderType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProviderType: %T", src)
	}
	return nil
}

type NullProviderType struct {
	ProviderType ProviderType `json:"providerType"`
	Valid        bool         `json:"valid"` // Valid is true if ProviderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProviderType) Scan(value interface{}) error {
	if value == nil {
		ns.ProviderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProviderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProviderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProviderType), nil
}

type Post struct {
	ID          uuid.UUID   `json:"id"`
	Media       MediaType   `json:"media"`
	DateCreated pgtype.Date `json:"dateCreated"`
	MediaUrl    *string     `json:"mediaUrl"`
}

type User struct {
	ID          uuid.UUID    `json:"id"`
	Provider    ProviderType `json:"provider"`
	DateCreated pgtype.Date  `json:"dateCreated"`
	Username    string       `json:"username"`
	Hash        *string      `json:"hash"`
	Salt        *string      `json:"salt"`
}

type UserProfile struct {
	UserID     uuid.UUID `json:"userId"`
	ProfilePic *string   `json:"profilePic"`
	Username   string    `json:"username"`
	Name       *string   `json:"name"`
}
